/*  Реализуйте и экспортируйте по умолчанию функцию, которая работает следующим образом:

Принимает на вход любое количество аргументов и возвращает функцию, которая, в свою очередь,
принимает на вход любое количество аргументов и так до бесконечности (привет, рекурсия ;)).
Аргументами могут быть только числа.
Результат вызова этой функции при проверке на равенство должен быть равен сумме всех аргументов всех подфункций.

    Объекты в JS по умолчанию имеют метод valueOf(), который вызывается автоматически в тех местах,
    где требуется преобразование к числовому значению (контекст арифметических операций и операций нестрогого сравнения).
    В ситуации выше, во время сравнения, JS вызовет valueOf() для нашей функции.
    Этим можно воспользоваться для того, чтобы возвращать сумму через valueOf().    */

export default function magic(...args){
    // сумма всех входящих в magic аргументов.
    const sum = args.flat(2).reduce((acc,val) => acc + val,0);

    // раз мы возвращаем внут.функцию inner, то в какой-то момент её попытаются привести типом == и должен вызваться её .valueOf
    // Её valueOf должен быть равен sum
    // Раз нельзя назначить .valueOf до объявления функции, придётся сначала объявить функцию inner, потом прописать её valueOf, потом только вернуть

    //объявили
    function inner(...nextArgs){
        return magic(nextArgs.concat(sum));
    }

    // назначили valueOf:
    inner.valueOf = () => sum;

    // возвращаем функцию, А НЕ РЕЗУЛЬТАТ ВЫЗОВА ФУНКЦИИ
    return inner;
}

console.log(magic()); // true
console.log(magic(5, 2, -8)); // true
console.log(magic(1, 2)(3, 4, 5)(6)(7, 10)); // true
console.log(magic(4, 8, 1, -1, -8)(3)(-3)(7, 2)); // true
//
console.log(magic() == 0); // true
console.log(magic(5, 2, -8) == -1); // true
console.log(magic(1, 2)(3, 4, 5)(6)(7, 10) == 38); // true
console.log(magic(4, 8, 1, -1, -8)(3)(-3)(7, 2) == 13); // true